1. Этапы работы с файлом:
    - Открытие файла (open)
    - Чтение/запись (read/write)
    - Закрытие файла (close)

2. Синтаксис функции open():
    open(file, mode)
    file – путь к файлу, mode – режим открытия файла

3. Возможные значения режима Mode:
    - r (чтение)
    - w (запись)
    - a (добавление)
    - b (бинарный режим)
    - t (текстовый режим)

4. Синтаксис функции write():
    file.write("строка для записи")

5. Синтаксис функции close():
    file.close()

6. Чтение из файла:
    Пример:
    with open("file.txt", "r") as file:
        data = file.read()

7. Обработка ошибок:
    Пример:
    try:
        with open("file.txt", "r") as file:
            data = file.read()
    except FileNotFoundError:
        print("Файл не найден.")

8. Методы read() и readline():
    - read() считывает весь файл целиком
    - readline() считывает одну строку за раз

9. Характеристика бинарных файлов:
    Бинарные файлы хранят данные в двоичном формате, не предназначенном для текстового редактирования.

10. Цель консервации данных:
    Консервация данных позволяет сохранять и восстанавливать объекты Python между сессиями.

11. Модули pickle и shelving:
    - pickle используется для сериализации и десериализации объектов.
    - shelving – более высокоуровневый интерфейс для хранения объектов в файловой системе.

12. Инструкция для записи в бинарный файл:
    file.write(b"data")

13. Возможные значения режима Mode для бинарных файлов:
    - rb (чтение)
    - wb (запись)
    - ab (добавление)

14. Запись в бинарный файл:
    Пример:
    with open("file.bin", "wb") as file:
        file.write(b"data")
